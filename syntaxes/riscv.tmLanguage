<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
    <key>fileTypes</key>
    <array>
      <string>S</string>
      <string>s</string>
      <string>riscv</string>
      <string>asm</string>
    </array>
    <key>keyEquivalent</key>
    <string>^~M</string>
    <key>name</key>
    <string>RISC-V Assembler</string>
    <key>patterns</key>
    <array>

      <!-- a/Zalrsc/Zaamo instructions -->
      <dict>
        <key>comment</key>
        <string>A extension (atomic instructions)</string>
        <key>match</key>
        <string>(?ix)\b(
          (
            amoadd\.[bdhw] |
            amoand\.[bdhw] |
            amomaxu?\.[bdhw] |
            amominu?\.[bdhw] |
            amoor\.[bdhw] |
            amoswap\.[bdhw] |
            amoxor\.[bdhw] |
            l[bdhw] |
            lr\.[dw] |
            s[bdhw] |
            sc\.[dw]
          )(\.(aq)?(rl)?)?
          )\b</string>
        <key>name</key>
        <string>support.function.riscv.a</string>
      </dict>

      <!-- i/zifencei instructions -->
      <dict>
        <key>match</key>
        <string>(?ix)\b(
          add(\.uw)? |
          addiw? |
          addw |
          andi? |
          auipc |
          beqz? |
          bgeu? |
          bgez |
          bgtu |
          bgtz? |
          bl[et]z |
          bleu? |
          bltu? |
          bnez? |
          call |
          csr[crsw] |
          csrr?[csw]i? |
          fence(\.i|\.tso)? |
          jalr? |
          jr? |
          jump |
          l[abhw]u? |
          l[lg]a |
          lbu? |
          ld |
          li |
          lui |
          move |
          mv |
          negw? |
          nop |
          not |
          ori? |
          pause |
          rdcycleh? |
          rdinstreth? |
          rdtime |
          ret |
          s[bdhw] |
          seqz |
          sext\.w |
          sgtu? |
          sgtz |
          slli(\.uw)? |
          slliw |
          sllw? |
          slti?u? |
          sltz |
          snez |
          srai?w? |
          srli?w? |
          subw? |
          tail |
          xori?
          )\b</string>
        <key>name</key>
        <string>support.function.riscv</string>
      </dict>

      <!-- privileged instructions -->
      <dict>
        <key>comment</key>
        <string>priviledged instructions</string>
        <key>match</key>
        <string>(?ix)\b(
          dret |
          ebreak |
          ecall |
          hfence.gvma |
          hfence.vvma |
          hinval.gvma |
          hinval.vvma |
          mnret |
          mret |
          sbreak |
          scall |
          sctrclr |
          sfence.inval.ir |
          sfence.vma |
          sfence.w.inval |
          sfence\.inval\.ir |
          sfence\.vma |
          sfence\.w\.inval |
          sinval.vma |
          sinval\.vma |
          sret |
          unimp |
          uret |
          wfi
          )\b</string>
        <key>name</key>
        <string>support.function.riscv.privileged</string>
      </dict>

      <!-- b instructions -->
      <dict>
        <key>comment</key>
        <string>B extension (Bit Manipulation)</string>
        <key>match</key>
        <string>(?ix)\b(
          andn |
          bclri? |
          bexti? |
          binvi? |
          bseti? |
          clmul[hr]? |
          clzw? |
          cpopw? |
          ctzw? |
          maxu? |
          minu? |
          orc\.b |
          orn |
          rev8 |
          rolw? |
          rori?w? |
          sext\.[bhw] |
          xnor |
          zext\.[bhw]
          )\b</string>
        <key>name</key>
        <string>support.function.riscv.b</string>
      </dict>

      <!-- c instructions -->
      <dict>
        <key>comment</key>
        <string>C extension (compressed instructions)</string>
        <key>match</key>
        <string>(?ix)\b(
          c\.addi? |
          c\.addi16sp |
          c\.addi4spn |
          c\.addi?w |
          c\.andi? |
          c\.beqz |
          c\.bnez |
          c\.ebreak |
          c\.fld(sp)? |
          c\.flw(sp)? |
          c\.fsd(sp)? |
          c\.fsw(sp)? |
          c\.jalr? |
          c\.jr? |
          c\.ld(sp)? |
          c\.li |
          c\.lq |
          c\.lui |
          c\.lw(sp)? |
          c\.mv |
          c\.nop |
          c\.or |
          c\.sd(sp)? |
          c\.slli |
          c\.slli64 |
          c\.sq |
          c\.srai |
          c\.srai64 |
          c\.srli |
          c\.srli64 |
          c\.subw? |
          c\.sw(sp)? |
          c\.unimp |
          c\.xor
          )\b</string>
        <key>name</key>
        <string>support.function.riscv.c</string>
      </dict>

      <!-- f/d/zfh/zfhmin/q/zfinx/zdinx/zhinx/zhinxmin instructions -->
      <dict>
        <key>comment</key>
        <string>F extension (single precision floating point)</string>
        <key>match</key>
        <string>(?ix)\b(
          f[ls][dhqw] |
          fabs\.[dhqs] |
          fadd\.[dhqs] |
          fclass\.[dhqs] |
          fcvt\.[dhq]\.s |
          fcvt\.[dhqs]\.lu? |
          fcvt\.[dhqs]\.wu? |
          fcvt\.[dqs]\.h |
          fcvt\.[hqs]\.d |
          fcvt\.lu?\.[dhqs] |
          fcvt\.wu?\.[dhqs] |
          fdiv\.[dhqs] |
          feq\.[dhqs] |
          fg[et]\.[dhqs] |
          fl[te]\.[dhqs] |
          fmadd\.[dhqs] |
          fmax\.[dhqs] |
          fmin\.[dhqs] |
          fmsub\.[dhqs] |
          fmul\.[dhqs] |
          fmv\.[dhqsw](\.x)? |
          fmv\.x\.[dhqsw] |
          fn?msub\.[dhqw] |
          fneg\.[dhqs] |
          fnmadd\.[dhqs] |
          fnmsub\.[dhqs] |
          frcsr |
          frflags |
          frrm |
          frsr |
          fscsr |
          fsflagsi? |
          fsgnj[nx]?\.[dhqs] |
          fsqrt\.[dhqs] |
          fsrmi? |
          fssr |
          fsub\.[dhqs]
          )\b</string>
        <key>name</key>
        <string>support.function.riscv.f</string>
      </dict>

      <!-- h instructions -->
      <dict>
        <key>comment</key>
        <string>H extension (hypervisor)</string>
        <key>match</key>
        <string>(?ix)\b(
          hfence\.[gv]vma |
          hlv\.[bdhw]u? |
          hlvx\.[hw]u |
          hsv\.[bdhw]
          )\b</string>
        <key>name</key>
        <string>support.function.riscv.h</string>
      </dict>

      <!-- m/zmmul instructions -->
      <dict>
        <key>comment</key>
        <string>M extension (multiplication and division)</string>
        <key>match</key>
        <string>(?ix)\b(
          mul |
          divu?w? |
          mulh |
          mulhs?u |
          mulw |
          remu?w?
          )\b</string>
        <key>name</key>
        <string>support.function.riscv.m</string>
      </dict>

      <!-- v instructions -->
      <dict>
        <key>comment</key>
        <string>V extension (Vector)</string>
        <key>match</key>
        <string>(?ix)\b(
          v[ls][1248]r\.v |
          v[ls][1248]re(8|16|32|64)\.v |
          v[ls][ou]xei(8|16|32|64)\.v |
          v[ls][ou]xseg[2-8]ei(8|16|32|64)\.v |
          v[ls]e(8|16|32|64)?(ff)?\.v |
          v[ls]m\.v |
          v[ls]s?seg[2-8]e(8|16|32|64)(ff)?\.v |
          v[ls]se(8|16|32|64)?\.v |
          v[sz]ext\.vf[248] |
          vaaddu?\.v[vx] |
          vadd\.v[ivx] |
          vandn?\.v[ivx] |
          vasubu?\.v[vx] |
          vcompress\.v[vm] |
          vdivu?\.v[vx] |
          vfabs\.v |
          vfadd\.v[fv] |
          vfclass\.v |
          vfcvt\.f\.xu?\.v |
          vfcvt\.rtz\.xu?\.f\.v |
          vfcvt\.xu?\.f\.v |
          vfdiv\.v[fv] |
          vfirst(\.m)? |
          vfmax\.v[fv] |
          vfmerge\.vfm? |
          vfmin\.v[fv] |
          vfmul\.v[fv] |
          vfmv\.f\.s |
          vfmv\.s\.f |
          vfmv\.v\.f |
          vfn?macc\.v[fv] |
          vfn?madd\.v[fv] |
          vfn?msac\.v[fv] |
          vfn?msub\.v[fv] |
          vfncvt\.f\.[fx]\.w |
          vfncvt\.f\.xu?\.w |
          vfncvt\.rod\.f\.f\.w |
          vfncvt\.rtz\.xu?\.f\.w |
          vfncvt\.xu?\.f\.w |
          vfneg\.v |
          vfrdiv\.vf |
          vfrec7\.v |
          vfwredsum\.vs |
          vfredmax\.v[sv] |
          vfredmin\.v[sv] |
          vfredosum\.v[sv] |
          vfredusum\.v[sv] |
          vfredsum\.vs |
          vfrsqrt7\.v |
          vfrsub\.vf |
          vfsgnj[nx]?\.v[fv] |
          vfslide1down\.vf |
          vfslide1up\.vf |
          vfsqrt\.v |
          vfsub\.v[fv] |
          VFUNARY[01]\.vv |
          vfwadd\.[vw][fv] |
          vfwcvt\.f\.f\.v |
          vfwcvt\.f\.xu?\.v |
          vfwcvt\.rtz\.xu?\.f\.v |
          vfwcvt\.xu?\.f\.v |
          vfwmul\.v[fv] |
          vfwn?macc\.v[fv] |
          vfwn?msac\.v[fv] |
          vfwred[ou]sum\.v[sv] |
          vfwsub\.[wv][fv] |
          vid\.v |
          viota\.[mv] |
          vle1\.v |
          vm?adc\.v[ivx]m? |
          vm?sbc\.v[vx]?m? |
          vmacc\.v[vx] |
          vmadd\.v[vx] |
          vmandn?\.mm |
          vmandnot\.mm |
          vmaxu?\.v[vx] |
          vmclr\.m |
          vmerge\.v[ivx]m? |
          vmfeq\.v[fv] |
          vmfg[te]\.v[fv] |
          vmfl[et]\.v[fv] |
          vmfne\.v[fv] |
          vminu?\.v[vx] |
          vmmv\.m |
          vmnand\.(mm|vv) |
          vmnor\.mm |
          vmnot\.m |
          vmorn\.(mm|vv) |
          vmornot\.mm |
          vms[ibo]f\.m |
          vms[obi]f\.v |
          vmseq\.v[ivx] |
          vmset\.m |
          vmsgeu?\.v[ivx] |
          vmsgtu?\.v[ivx] |
          vmsleu?\.v[ivx] |
          vmsltu?\.v[ivx] |
          vmsne\.v[ivx] |
          vmul[h]?\.v[vx] |
          vmulhs?u\.v[vx] |
          VMUNARY0\.vv |
          vmv[1-8]r\.vr? |
          vmv\.s\.x |
          vmv\.v\.[ivx] |
          vmv\.x\.s |
          vmx?or\.(mm|vv) |
          vmxn?or\.(mm|vv) |
          vnclipu?\.w[ivx] |
          vncvt\.x\.x\.w |
          vneg\.v |
          vnmsac\.v[vx] |
          vnmsub\.v[vx] |
          vnot\.v |
          vnsr[la]\.[vw][ivx] |
          vpopc\.m |
          vredand\.v[sv] |
          vredmaxu?\.v[sv] |
          vredminu?\.v[sv] |
          vredsum\.v[sv] |
          vredx?or\.v[sv] |
          vremu?\.v[vx] |
          VRFUNARY0\.vf |
          vrgather\.v[ivx] |
          vrgatherei16\.vv |
          vrsub\.v[ivx] |
          VRXUNARY0\.vx |
          vsaddu?\.v[ivx] |
          vse1\.v |
          vseti?vli? |
          vslide1down\.vx |
          vslide1up\.vx |
          vslidedown\.v[ix] |
          vslideup\.v[ix] |
          vsll\.v[ivx] |
          vsmul\.v[vx] |
          vsr[la]\.v[ivx] |
          vssr[la]\.v[ivx] |
          vssubu?\.v[vx] |
          vsub\.v[vx] |
          vwaddu?\.[wv][vx] |
          vwcvtu?\.x\.x\.v |
          VWFUNARY0\.vv |
          vwmaccsu\.v[vx] |
          vwmaccu?\.v[vx] |
          vwmaccus\.vx |
          vwmul\.v[vx] |
          vwmuls?u\.v[vx] |
          vwredsumu?\.v[sv] |
          vwsubu?(\.w)?\.[wv][vx] |
          VWXUNARY0\.vv |
          vx?or\.v[ivx] |
          VXUNARY0\.vv
          )\b</string>
        <key>name</key>
        <string>support.function.riscv.v</string>
      </dict>

      <!-- zacas instructions -->
      <dict>
        <key>comment</key>
        <string>zacas extension</string>
        <key>match</key>
        <string>(?ix)\b(
          amocas\.[bdhqw]\.?(aq)?(rl)?
          )\b</string>
        <key>name</key>
        <string>support.function.riscv.zacas</string>
      </dict>


      <!-- zawrs instructions -->
      <dict>
        <key>comment</key>
        <string>zawrs extension</string>
        <key>match</key>
        <string>(?ix)\b(
          wrs\.nto |
          wrs\.sto
          )\b</string>
        <key>name</key>
        <string>support.function.riscv.zawrs</string>
      </dict>


      <!-- zba instructions -->
      <dict>
        <key>comment</key>
        <string>zba extension</string>
        <key>match</key>
        <string>(?ix)\b(
          sh[123]add(\.uw)?
          )\b</string>
        <key>name</key>
        <string>support.function.riscv.zba</string>
      </dict>

      <!-- zbkb instructions -->
      <dict>
        <key>comment</key>
        <string>zbkb extension</string>
        <key>match</key>
        <string>(?ix)\b(
          brev8 |
          pack[hw]? |
          unzip |
          zip
          )\b</string>
        <key>name</key>
        <string>support.function.riscv.zbkb</string>
      </dict>

      <!-- zbkx instructions -->
      <dict>
        <key>comment</key>
        <string>zbkx extension</string>
        <key>match</key>
        <string>(?ix)\b(
          xperm[48]
          )\b</string>
        <key>name</key>
        <string>support.function.riscv.zbkx</string>
      </dict>

      <!-- zc instructions -->
      <dict>
        <key>comment</key>
        <string>zc extension (Code Size Reduction)</string>
        <key>match</key>
        <string>(?ix)\b(
          c\.[sz]ext\.[bh] |
          c\.lbu |
          c\.lhu? |
          c\.mul |
          c\.not |
          c\.s[bh] |
          c\.zext\.w |
          cm\.jalt |
          cm\.jt |
          cm\.mva01s |
          cm\.mvsa01 |
          cm\.pop |
          cm\.popretz? |
          cm\.push
          )\b</string>
        <key>name</key>
        <string>support.function.riscv.zc</string>
      </dict>

      <!-- zfa instructions -->
      <dict>
        <key>comment</key>
        <string>zfa extension</string>
        <key>match</key>
        <string>(?ix)\b(
          fcvtmod\.w\.d |
          fgeq\.[dhs] |
          fgtq\.[dhs] |
          fleq\.[dhs] |
          fli\.[dhs] |
          fltq\.[dhs] |
          fmaxm\.[dhs] |
          fminm\.[dhs] |
          fmvh\.x\.d |
          fmvp\.d\.x |
          fround(nx)?\.[dhs]
          )\b</string>
        <key>name</key>
        <string>support.function.riscv.zfa</string>
      </dict>

      <!-- Zfbfmin instructions -->
      <dict>
        <key>comment</key>
        <string>Zfbfmin extension (Scalar BF16 Converts)</string>
        <key>match</key>
        <string>(?ix)\b(
          fcvt\.bf16\.s |
          fcvt\.s\.bf16
          )\b</string>
        <key>name</key>
        <string>support.function.riscv.zfbfmin</string>
      </dict>

      <!-- zicbom instructions -->
      <dict>
        <key>comment</key>
        <string>zicbom extension</string>
        <key>match</key>
        <string>(?ix)\b(
          cbo\.(clean|flush|inval)
          )\b</string>
        <key>name</key>
        <string>support.function.riscv.zicbom</string>
      </dict>

      <!-- zicbop instructions -->
      <dict>
        <key>comment</key>
        <string>zicbop extension</string>
        <key>match</key>
        <string>(?ix)\b(
          prefetch\.[irw]
          )\b</string>
        <key>name</key>
        <string>support.function.riscv.zicbop</string>
      </dict>

      <!-- zicboz instructions -->
      <dict>
        <key>comment</key>
        <string>zicboz extension</string>
        <key>match</key>
        <string>(?ix)\b(
          cbo\.zero
          )\b</string>
        <key>name</key>
        <string>support.function.riscv.zicboz</string>
      </dict>

      <!-- zicfilp instructions -->
      <dict>
        <key>comment</key>
        <string>zicfilp extension</string>
        <key>match</key>
        <string>(?ix)\b(
          lpad
          )\b</string>
        <key>name</key>
        <string>support.function.riscv.zicfilp</string>
      </dict>

      <!-- zicfiss instructions -->
      <dict>
        <key>comment</key>
        <string>zicfiss extension</string>
        <key>match</key>
        <string>(?ix)\b(
          ssamoswap.[dw](.(aq)?(rl)?)? |
          sspopchk |
          sspush |
          ssrdp
          )\b</string>
        <key>name</key>
        <string>support.function.riscv.zicfiss</string>
      </dict>

      <!-- zicond instructions -->
      <dict>
        <key>comment</key>
        <string>zicond extension</string>
        <key>match</key>
        <string>(?ix)\b(
          czero\.eqz |
          czero\.nez
          )\b</string>
        <key>name</key>
        <string>support.function.riscv.zicond</string>
      </dict>

      <!-- zihintntl/zihintntlc instructions -->
      <dict>
        <key>comment</key>
        <string>zihintntl extension</string>
        <key>match</key>
        <string>(?ix)\b(
          (c\.)?ntl\.all |
          (c\.)?ntl\.p1 |
          (c\.)?ntl\.pall |
          (c\.)?ntl\.s1
          )\b</string>
        <key>name</key>
        <string>support.function.riscv.zihintntl</string>
      </dict>

      <!-- zimop instructions v0.1 -->
      <dict>
        <key>comment</key>
        <string>zimop extension(May-Be-Operations Extension)</string>
        <key>match</key>
        <string>(?ix)\b(
          c\.mop\.([13579]|1[135]) |
          mop\.r\.([12]?[0-9]|3[01]) |
          mop\.rr\.[0-7]
          )\b</string>
        <key>name</key>
        <string>support.function.riscv.zimop</string>
      </dict>

      <!-- zknd instructions -->
      <dict>
        <key>comment</key>
        <string>zknd extension</string>
        <key>match</key>
        <string>(?ix)\b(
          aes32dsi |
          aes32dsmi |
          aes64dsm? |
          aes64im |
          aes64ks1i |
          aes64ks2
          )\b</string>
        <key>name</key>
        <string>support.function.riscv.zknd</string>
      </dict>

      <!-- zkne instructions -->
      <dict>
        <key>comment</key>
        <string>zkne extension</string>
        <key>match</key>
        <string>(?ix)\b(
          aes64esm? |
          aes64ks1i |
          aes64ks2
          )\b</string>
        <key>name</key>
        <string>support.function.riscv.zkne</string>
      </dict>

      <!-- zknh instructions -->
      <dict>
        <key>comment</key>
        <string>zknh extension</string>
        <key>match</key>
        <string>(?ix)\b(
          sha512sig[01][hl]? |
          sha512sum[01]r?
          )\b</string>
        <key>name</key>
        <string>support.function.riscv.zknh</string>
      </dict>

      <!-- zksed instructions -->
      <dict>
        <key>comment</key>
        <string>zksed extension</string>
        <key>match</key>
        <string>(?ix)\b(
          sm4ed |
          sm4ks
          )\b</string>
        <key>name</key>
        <string>support.function.riscv.zksed</string>
      </dict>

      <!-- zksh instructions -->
      <dict>
        <key>comment</key>
        <string>zksh extension</string>
        <key>match</key>
        <string>(?ix)\b(
          sm3p[01]
          )\b</string>
        <key>name</key>
        <string>support.function.riscv.zksh</string>
      </dict>

      <!-- zvbb instructions -->
      <dict>
        <key>comment</key>
        <string>zvbv extension (Vector BB)</string>
        <key>match</key>
        <string>(?ix)\b(
          vb?rev8?\.v |
          vc[tl]z\.v |
          vcpop(\.[vm])? |
          vro[rl]\.v[ivx] |
          vwsll\.v[xvi]
          )\b</string>
        <key>name</key>
        <string>support.function.riscv.zvbb</string>
      </dict>

      <!-- zvbc instructions -->
      <dict>
        <key>comment</key>
        <string>zvbc extension (Vector BC)</string>
        <key>match</key>
        <string>(?ix)\b(
          vclmulh?.v[vx]
          )\b</string>
        <key>name</key>
        <string>support.function.riscv.zvbc</string>
      </dict>

      <!-- zvbc32e instructions -->
      <dict>
        <key>comment</key>
        <string>zvbc32e extension (Vector BC)</string>
        <key>match</key>
        <string>(?ix)\b(
          vghsh\.vs |
          vgmul\.vs
          )\b</string>
        <key>name</key>
        <string>support.function.riscv.zvbc32e</string>
      </dict>

      <!-- zvfbfmin instructions -->
      <dict>
        <key>comment</key>
        <string>zvfbfmin extension (Vector BF16)</string>
        <key>match</key>
        <string>(?ix)\b(
          vfncvtbf16\.f\.f\.w |
          vfwcvtbf16\.f\.f\.v
          )\b</string>
        <key>name</key>
        <string>support.function.riscv.zvfbfmin</string>
      </dict>

      <!-- Zvfbfwma instructions -->
      <dict>
        <key>comment</key>
        <string>Zvfbfwma extension (Vector BF16 widening mul-add)</string>
        <key>match</key>
        <string>(?ix)\b(
          vfwmaccbf16\.v[fv]
          )\b</string>
        <key>name</key>
        <string>support.function.riscv.zvfbfwma</string>
      </dict>

      <!-- zvkg instructions -->
      <dict>
        <key>comment</key>
        <string>zvkg extension</string>
        <key>match</key>
        <string>(?ix)\b(
          vghsh\.vv |
          vgmul\.vv
          )\b</string>
        <key>name</key>
        <string>support.function.riscv.zvkg</string>
      </dict>

      <!-- zvkned instructions -->
      <dict>
        <key>comment</key>
        <string>zvkned extension</string>
        <key>match</key>
        <string>(?ix)\b(
          vaesdf\.v[sv] |
          vaesdm\.v[sv] |
          vaesef\.v[sv] |
          vaesem\.v[sv] |
          vaeskf1\.vi |
          vaeskf2\.vi |
          vaesz\.vs
          )\b</string>
        <key>name</key>
        <string>support.function.riscv.zvkned</string>
      </dict>

      <!-- zvknh instructions -->
      <dict>
        <key>comment</key>
        <string>zvknh extension</string>
        <key>match</key>
        <string>(?ix)\b(
          vsha2ch\.vv |
          vsha2cl\.vv |
          vsha2ms\.vv
          )\b</string>
        <key>name</key>
        <string>support.function.riscv.zvknh</string>
      </dict>

      <!-- zvksed instructions -->
      <dict>
        <key>comment</key>
        <string>zvksed extension</string>
        <key>match</key>
        <string>(?ix)\b(
          vsm4k\.vi |
          vsm4r\.v[sv]
          )\b</string>
        <key>name</key>
        <string>support.function.riscv.zvksed</string>
      </dict>

      <!-- zvksh instructions -->
      <dict>
        <key>comment</key>
        <string>zvksh extension</string>
        <key>match</key>
        <string>(?ix)\b(
          vsm3c\.vi |
          vsm3me\.vv
          )\b</string>
        <key>name</key>
        <string>support.function.riscv.zvksh</string>
      </dict>

      <!-- asm type -->
      <dict>
        <key>match</key>
        <string>(?ix)\.(
          [248]byte |
          [su]leb128 |
          asciiz? |
          asciz |
          byte |
          comm |
          common |
          data |
          double |
          dtpreldword |
          dtprelword |
          dword |
          fill|
          float |
          half |
          hword |
          incbin |
          kdata |
          ktext |
          long |
          org |
          quad |
          rodata |
          set |
          short |
          single |
          size |
          skip |
          space |
          string |
          text |
          variant_cc |
          weak |
          word |
          zero
          )\b</string>
        <key>name</key>
        <string>storage.type.riscv</string>
      </dict>

      <!-- asm modifier -->
      <dict>
        <key>match</key>
        <string>(?ix)\.(
          addrsig(_sym)? |
          align |
          attribute |
          balign |
          bss |
          cfi_def_cfa(_offset)? |
          cfi_endproc |
          cfi_offset |
          cfi_restore |
          cfi_sections |
          cfi_startproc |
          endm |
          equ |
          extern |
          file |
          global |
          globl |
          ident |
          insn[ ](b|ca|cb|ci|ciw|cj|cl|cr|cs|css|i|j|q|r|r4|s|sb|u|uj) |
          loc |
          local |
          macro |
          option([ ]arch)? |
          p2align |
          pushsection |
          reloc |
          section |
          type
          )\b</string>
        <key>name</key>
        <string>storage.modifier.riscv</string>
      </dict>

      <!-- insn instructions -->
      <dict>
        <key>comment</key>
        <string>insn extension</string>
        <key>match</key>
        <string>(?ix)\b(
          BP_M |
          BRANCH |
          C[0-2] |
          JALR |
          LOAD |
          MADD |
          OP |
          OP_IMM |
          STORE
          )\b</string>
        <key>name</key>
        <string>support.function.riscv.insn</string>
      </dict>

      <!-- asm relocation  -->
      <dict>
        <key>match</key>
        <string>(?ix)\%(
          got_pcrel_hi |
          hi |
          lo |
          pcrel_hi |
          pcrel_lo |
          tls_gd_pcrel_hi |
          tls_ie_pcrel_hi |
          tprel_add |
          tprel_hi |
          tprel_lo
          )\b</string>
        <key>name</key>
        <string>storage.relocation.riscv</string>
      </dict>

      <!-- asm label : -->
      <dict>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>entity.name.function.label.riscv</string>
          </dict>
        </dict>
        <key>match</key>
        <string>(?x)(
          [1-9][0-9]*[bf] |
          \.L[A-Za-z0-9_\.]+:? |
          \b\.?[A-Za-z0-9_]+:
          )</string>
        <key>name</key>
        <string>meta.function.label.riscv</string>
      </dict>

      <!-- x/f register alias -->
      <dict>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.variable.riscv</string>
          </dict>
        </dict>
        <key>match</key>
        <string>(?ix)\b(
          dyn |
          f[12]?[0-9] |
          f3[0-1] |
          f?a[0-7] |
          f?s[0-9] |
          f?s1[0-1] |
          f?t[0-6] |
          fp |
          ft[7-9] |
          ft1[01] |
          gp |
          ra |
          rdn |
          rmm |
          rne |
          rtz |
          rup |
          sp |
          tp |
          x[12]?[0-9] |
          x3[01] |
          zero
          )\b</string>
        <key>name</key>
        <string>variable.other.register.usable.by-name.riscv</string>
      </dict>

      <!-- v register -->
      <dict>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.variable.riscv</string>
          </dict>
        </dict>
        <key>match</key>
        <string>(?ix)\b(
          e(8|16|32|64) |
          m[1248] |
          m[au] |
          mf?[248] |
          t[au] |
          v[0](\.t)? |
          v[1-9] |
          v[12][0-9] |
          v3[01]
          )\b</string>
        <key>name</key>
        <string>variable.other.register.usable.vector.riscv</string>
      </dict>

      <!-- csr register -->
      <dict>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.variable.riscv</string>
          </dict>
        </dict>
        <key>match</key>
        <string>(?ix)\b(
          ([hmsu]|vs)ie |
          ([hmsu]|vs)ip |
          ([hmsu]|vs)status |
          ([hmsu]|vs)tval |
          ([msu]|vs)cause |
          ([msu]|vs)epc |
          ([msu]|vs)scratch |
          ([msu]|vs)tvec |
          [hm]tinst |
          [msh][ei]deleg |
          [msh]counteren |
          dcsr |
          dpc |
          dscratch |
          dscratch[0-1] |
          fcsr |
          fflags |
          frm |
          hcontext |
          henvcfgh? |
          hgatp |
          hgeie |
          hgeip |
          hidelegh |
          hstateen[0-3]h? |
          htimedeltah? |
          hvictl |
          hvienh? |
          hviph? |
          hviprio[12]h? |
          io |
          iorw |
          jvt |
          m?cycleh? |
          m?hpmcounter([3-9]|[12][0-9]|3[01])h? |
          m?instreth? |
          marchid |
          mconfigptr |
          mcontext |
          mcountinhibit |
          mctrctl |
          menvcfgh? |
          mhartid |
          mhpmevent([3-9]|[12][0-9]|3[01])h? |
          midelegh |
          mieh |
          mimpid |
          miph |
          mireg[2-6]? |
          misa |
          miselect |
          mncause |
          mnepc |
          mnscratch |
          mnstatus |
          mscontext |
          mseccfgh? |
          mstateen[0-3] |
          mstateen[0-3]h |
          mstatush |
          mtopei |
          mtopi |
          mtval2 |
          mucounteren |
          mvendorid |
          mvien |
          mvienh |
          mvip |
          mviph |
          pmpaddr([0-9]|[1-5][0-9]|6[0-3]) |
          pmpcfg[0-9] |
          pmpcfg1[0-5] |
          r |
          rw |
          scontext |
          scountovf |
          seed |
          senvcfg |
          sieh? |
          siph? |
          sireg |
          siselect |
          srmcfg |
          sstateen[0-3] |
          stimecmph? |
          stopei |
          stopi |
          tcontrol |
          tdata[1-3] |
          timeh? |
          tinfo |
          tselect |
          v?satp |
          vcsr |
          vl |
          vlenb |
          vsi[pe]h |
          vsireg |
          vsiselect |
          vstart |
          vstimecmph? |
          vstope?i |
          vtype |
          vxrm |
          vxsat |
          w
          )\b</string>
        <key>name</key>
        <string>variable.other.csr.names.riscv</string>
      </dict>

      <!-- float number -->
      <dict>
        <key>match</key>
        <string>(?ix)\b(
          [+-]?\d+\.\d+ |
          [+-]?\d+\.\d+[e][+-]\d+ |
          [+-]?\d+|0(x|X)[a-fA-F0-9]+(\.[a-fA-F0-9]*)?c?p[+-]\d+ |
          inf |
          nan
          )\b</string>
        <key>name</key>
        <string>constant.numeric.float.riscv</string>
      </dict>

      <!-- integer number -->
      <dict>
        <key>match</key>
        <string>(?ix)\b(
          [+-]?\d+ |
          [+-]?0(x|X)[a-fA-F0-9]+ |
          [+-]?0(b|B)[01]+
          )\b</string>
        <key>name</key>
        <string>constant.numeric.integer.riscv</string>
      </dict>

      <!-- "" string -->
      <dict>
        <!-- left " -->
        <key>begin</key>
        <string>"</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.string.begin.riscv</string>
          </dict>
        </dict>

        <!-- right " -->
        <key>end</key>
        <string>"</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.string.end.riscv</string>
          </dict>
        </dict>

        <!-- escape character -->
        <key>name</key>
        <string>string.quoted.double.riscv</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>\\[rnt\\"]</string>
            <key>name</key>
            <string>constant.character.escape.riscv</string>
          </dict>
        </array>
      </dict>

      <!-- ' string -->
      <dict>
        <!-- left ' -->
        <key>begin</key>
        <string>'</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.string.begin.riscv</string>
          </dict>
        </dict>

        <!-- right ' -->
        <key>end</key>
        <string>'</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.string.end.riscv</string>
          </dict>
        </dict>

        <!-- escape character -->
        <key>name</key>
        <string>string.quoted.single.riscv</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>\\[rnt\\"]</string>
            <key>name</key>
            <string>constant.character.escape.riscv</string>
          </dict>
        </array>
      </dict>

      <!-- multiline comment -->
      <dict>
        <key>begin</key>
        <string>\/\*</string>
        <key>end</key>
        <string>\*\/</string>
        <key>name</key>
        <string>comment.block</string>
      </dict>

      <!-- single comment -->
      <dict>
        <key>begin</key>
        <string>\/\/</string>
        <key>end</key>
        <string>\n</string>
        <key>name</key>
        <string>comment.line.double-slash</string>
      </dict>

      <!-- preprocessors from C, borrowed from https://github.com/kodLite/cppStartingKit/blob/master/C%2B%2B.tmLanguage -->
      <dict>
        <key>begin</key>
        <string>(?ix)
          ^\s*\#\s*(define)\s+             # define
          ((?&lt;id&gt;[a-zA-Z_][a-zA-Z0-9_]*))  # macro name
          (?:                              # and optionally:
          (\()                         # an open parenthesis
          (
          \s* \g&lt;id&gt; \s*       # first argument
          ((,) \s* \g&lt;id&gt; \s*)*  # additional arguments
          (?:\.\.\.)?          # varargs ellipsis?
          )
          (\))                         # a close parenthesis
          )?
        </string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.import.define.c</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>entity.name.function.preprocessor.c</string>
          </dict>
          <key>4</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.parameters.c</string>
          </dict>
          <key>5</key>
          <dict>
            <key>name</key>
            <string>variable.parameter.preprocessor.c</string>
          </dict>
          <key>7</key>
          <dict>
            <key>name</key>
            <string>punctuation.separator.parameters.c</string>
          </dict>
          <key>8</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.parameters.c</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=(?://|/\*))|$</string>
        <key>name</key>
        <string>meta.preprocessor.macro.c</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>(?&gt;\\\s*\n)</string>
            <key>name</key>
            <string>punctuation.separator.continuation.c</string>
          </dict>
          <dict>
            <key>include</key>
            <string>$base</string>
          </dict>
        </array>
      </dict>

      <!-- Meta Preprocessor Diagnostic - C -->
      <dict>
        <key>begin</key>
        <string>^\s*#\s*(error|warning)\b</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.import.error.c</string>
          </dict>
        </dict>
        <key>end</key>
        <string>$</string>
        <key>name</key>
        <string>meta.preprocessor.diagnostic.c</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>(?&gt;\\\s*\n)</string>
            <key>name</key>
            <string>punctuation.separator.continuation.c</string>
          </dict>
        </array>
      </dict>

      <!-- Meta Preprocessor Include - C -->
      <dict>
        <key>begin</key>
        <string>^\s*#\s*(include|import)\b\s+</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.import.include.c</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=(?://|/\*))|$</string>
        <key>name</key>
        <string>meta.preprocessor.c.include</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>(?&gt;\\\s*\n)</string>
            <key>name</key>
            <string>punctuation.separator.continuation.c</string>
          </dict>
          <dict>
            <key>begin</key>
            <string>"</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.begin.c</string>
              </dict>
            </dict>
            <key>end</key>
            <string>"</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.end.c</string>
              </dict>
            </dict>
            <key>name</key>
            <string>string.quoted.double.include.c</string>
          </dict>
          <dict>
            <key>begin</key>
            <string>&lt;</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.begin.c</string>
              </dict>
            </dict>
            <key>end</key>
            <string>&gt;</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.end.c</string>
              </dict>
            </dict>
            <key>name</key>
            <string>string.quoted.other.lt-gt.include.c</string>
          </dict>
        </array>
      </dict>

      <!-- Meta Preprocessor - C -->
      <dict>
        <key>begin</key>
        <string>^\s*[#\.](define|defined|elif|else|if|ifdef|ifndef|line|pragma|undef|endif)\b</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.import.c</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=(?://|/\*))|$</string>
        <key>name</key>
        <string>meta.preprocessor.c</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>(?&gt;\\\s*\n)</string>
            <key>name</key>
            <string>punctuation.separator.continuation.c</string>
          </dict>
        </array>
      </dict>

      <dict>
        <key>begin</key>
        <string>(^[ \t]+)?(?=#)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.whitespace.comment.leading.riscv</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?!\G)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>#|(\/\/)</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.comment.riscv</string>
              </dict>
            </dict>
            <key>end</key>
            <string>\n</string>
            <key>name</key>
            <string>comment.line.number-sign.riscv</string>
          </dict>
        </array>
      </dict>

    </array>

    <key>scopeName</key>
    <string>source.riscv</string>
    <key>uuid</key>
    <!-- sunshaoce -->
    <string>b116ecb7-8909-6fd6-b753-ecf9b5165940</string>
  </dict>
</plist>
